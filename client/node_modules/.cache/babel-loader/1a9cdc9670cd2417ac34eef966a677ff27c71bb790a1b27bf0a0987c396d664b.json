{"ast":null,"code":"import html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\nexport async function generatePDF() {\n  const formElement = document.getElementById('form-to-pdf');\n  if (!formElement) {\n    console.error('generatePDF error: form element not found');\n    return;\n  }\n  const canvas = await html2canvas(formElement, {\n    scale: window.devicePixelRatio || 2,\n    useCORS: true,\n    letterRendering: true,\n    onclone: clonedDoc => {\n      const clonedForm = clonedDoc.getElementById('form-to-pdf');\n      if (!clonedForm) return;\n\n      // apply your print‑form class if you have other print‑only CSS rules\n      clonedForm.classList.add('print-form');\n\n      // Replace each textarea with a div that auto‑wraps & auto‑heights\n      clonedForm.querySelectorAll('textarea').forEach(ta => {\n        const style = window.getComputedStyle(ta);\n        const replacement = clonedDoc.createElement('div');\n\n        // copy a handful of key styles so it looks the same\n        replacement.style.width = style.width;\n        replacement.style.minHeight = 'auto';\n        replacement.style.whiteSpace = 'pre-wrap';\n        replacement.style.wordBreak = 'break-word';\n        replacement.style.boxSizing = 'border-box';\n        replacement.style.padding = style.padding;\n        replacement.style.font = style.font;\n        replacement.style.lineHeight = style.lineHeight;\n        replacement.style.border = style.border;\n        replacement.style.background = style.backgroundColor;\n\n        // transfer the text, preserving line‑breaks\n        replacement.innerHTML = ta.value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\n/g, '<br>');\n        ta.parentNode.replaceChild(replacement, ta);\n      });\n    }\n  });\n\n  // now you have a canvas that shows the entire, expanded form\n  const imgData = canvas.toDataURL('image/png');\n  const pdf = new jsPDF({\n    unit: 'px',\n    format: [canvas.width, canvas.height]\n  });\n  pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);\n  pdf.save('form.pdf');\n}","map":{"version":3,"names":["html2canvas","jsPDF","generatePDF","formElement","document","getElementById","console","error","canvas","scale","window","devicePixelRatio","useCORS","letterRendering","onclone","clonedDoc","clonedForm","classList","add","querySelectorAll","forEach","ta","style","getComputedStyle","replacement","createElement","width","minHeight","whiteSpace","wordBreak","boxSizing","padding","font","lineHeight","border","background","backgroundColor","innerHTML","value","replace","parentNode","replaceChild","imgData","toDataURL","pdf","unit","format","height","addImage","save"],"sources":["C:/development/staff-update-form/client/src/pdfGenerator.js"],"sourcesContent":["import html2canvas from 'html2canvas'\r\nimport { jsPDF }    from 'jspdf'\r\n\r\nexport async function generatePDF() {\r\n  const formElement = document.getElementById('form-to-pdf')\r\n  if (!formElement) {\r\n    console.error('generatePDF error: form element not found')\r\n    return\r\n  }\r\n\r\n  const canvas = await html2canvas(formElement, {\r\n    scale: window.devicePixelRatio || 2,\r\n    useCORS: true,\r\n    letterRendering: true,\r\n    onclone: (clonedDoc) => {\r\n      const clonedForm = clonedDoc.getElementById('form-to-pdf')\r\n      if (!clonedForm) return\r\n\r\n      // apply your print‑form class if you have other print‑only CSS rules\r\n      clonedForm.classList.add('print-form')\r\n\r\n      // Replace each textarea with a div that auto‑wraps & auto‑heights\r\n      clonedForm.querySelectorAll('textarea').forEach((ta) => {\r\n        const style = window.getComputedStyle(ta)\r\n        const replacement = clonedDoc.createElement('div')\r\n\r\n        // copy a handful of key styles so it looks the same\r\n        replacement.style.width        = style.width\r\n        replacement.style.minHeight    = 'auto'\r\n        replacement.style.whiteSpace   = 'pre-wrap'\r\n        replacement.style.wordBreak    = 'break-word'\r\n        replacement.style.boxSizing    = 'border-box'\r\n        replacement.style.padding      = style.padding\r\n        replacement.style.font         = style.font\r\n        replacement.style.lineHeight   = style.lineHeight\r\n        replacement.style.border       = style.border\r\n        replacement.style.background   = style.backgroundColor\r\n\r\n        // transfer the text, preserving line‑breaks\r\n        replacement.innerHTML = ta.value\r\n                               .replace(/&/g, '&amp;')\r\n                               .replace(/</g, '&lt;')\r\n                               .replace(/>/g, '&gt;')\r\n                               .replace(/\\n/g, '<br>')\r\n\r\n        ta.parentNode.replaceChild(replacement, ta)\r\n      })\r\n    }\r\n  })\r\n\r\n  // now you have a canvas that shows the entire, expanded form\r\n  const imgData = canvas.toDataURL('image/png')\r\n  const pdf     = new jsPDF({\r\n    unit:  'px',\r\n    format: [ canvas.width, canvas.height ]\r\n  })\r\n\r\n  pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height)\r\n  pdf.save('form.pdf')\r\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AACrC,SAASC,KAAK,QAAW,OAAO;AAEhC,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;EAC1D,IAAI,CAACF,WAAW,EAAE;IAChBG,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC1D;EACF;EAEA,MAAMC,MAAM,GAAG,MAAMR,WAAW,CAACG,WAAW,EAAE;IAC5CM,KAAK,EAAEC,MAAM,CAACC,gBAAgB,IAAI,CAAC;IACnCC,OAAO,EAAE,IAAI;IACbC,eAAe,EAAE,IAAI;IACrBC,OAAO,EAAGC,SAAS,IAAK;MACtB,MAAMC,UAAU,GAAGD,SAAS,CAACV,cAAc,CAAC,aAAa,CAAC;MAC1D,IAAI,CAACW,UAAU,EAAE;;MAEjB;MACAA,UAAU,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;;MAEtC;MACAF,UAAU,CAACG,gBAAgB,CAAC,UAAU,CAAC,CAACC,OAAO,CAAEC,EAAE,IAAK;QACtD,MAAMC,KAAK,GAAGZ,MAAM,CAACa,gBAAgB,CAACF,EAAE,CAAC;QACzC,MAAMG,WAAW,GAAGT,SAAS,CAACU,aAAa,CAAC,KAAK,CAAC;;QAElD;QACAD,WAAW,CAACF,KAAK,CAACI,KAAK,GAAUJ,KAAK,CAACI,KAAK;QAC5CF,WAAW,CAACF,KAAK,CAACK,SAAS,GAAM,MAAM;QACvCH,WAAW,CAACF,KAAK,CAACM,UAAU,GAAK,UAAU;QAC3CJ,WAAW,CAACF,KAAK,CAACO,SAAS,GAAM,YAAY;QAC7CL,WAAW,CAACF,KAAK,CAACQ,SAAS,GAAM,YAAY;QAC7CN,WAAW,CAACF,KAAK,CAACS,OAAO,GAAQT,KAAK,CAACS,OAAO;QAC9CP,WAAW,CAACF,KAAK,CAACU,IAAI,GAAWV,KAAK,CAACU,IAAI;QAC3CR,WAAW,CAACF,KAAK,CAACW,UAAU,GAAKX,KAAK,CAACW,UAAU;QACjDT,WAAW,CAACF,KAAK,CAACY,MAAM,GAASZ,KAAK,CAACY,MAAM;QAC7CV,WAAW,CAACF,KAAK,CAACa,UAAU,GAAKb,KAAK,CAACc,eAAe;;QAEtD;QACAZ,WAAW,CAACa,SAAS,GAAGhB,EAAE,CAACiB,KAAK,CACRC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;QAE9ClB,EAAE,CAACmB,UAAU,CAACC,YAAY,CAACjB,WAAW,EAAEH,EAAE,CAAC;MAC7C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;;EAEF;EACA,MAAMqB,OAAO,GAAGlC,MAAM,CAACmC,SAAS,CAAC,WAAW,CAAC;EAC7C,MAAMC,GAAG,GAAO,IAAI3C,KAAK,CAAC;IACxB4C,IAAI,EAAG,IAAI;IACXC,MAAM,EAAE,CAAEtC,MAAM,CAACkB,KAAK,EAAElB,MAAM,CAACuC,MAAM;EACvC,CAAC,CAAC;EAEFH,GAAG,CAACI,QAAQ,CAACN,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAElC,MAAM,CAACkB,KAAK,EAAElB,MAAM,CAACuC,MAAM,CAAC;EAC/DH,GAAG,CAACK,IAAI,CAAC,UAAU,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}