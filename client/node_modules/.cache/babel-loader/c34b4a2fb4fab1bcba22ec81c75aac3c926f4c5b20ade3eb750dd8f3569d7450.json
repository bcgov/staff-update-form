{"ast":null,"code":"// pdfUtils.js\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nexport async function generatePDF() {\n  const formElement = document.getElementById('form-to-pdf');\n  if (!formElement) throw new Error('form-to-pdf element not found');\n  const canvas = await html2canvas(formElement, {\n    scale: window.devicePixelRatio || 2,\n    useCORS: true,\n    letterRendering: true,\n    onclone: clonedDoc => {\n      // add our print‐form class so any sizing CSS applies\n      const clonedForm = clonedDoc.getElementById('form-to-pdf');\n      clonedForm === null || clonedForm === void 0 ? void 0 : clonedForm.classList.add('print-form');\n\n      // replace <textarea> with wrapping <div>\n      clonedForm.querySelectorAll('textarea').forEach(ta => {\n        var _ta$parentNode;\n        const style = window.getComputedStyle(ta);\n        const wrapper = clonedDoc.createElement('div');\n\n        // copy size & font styles\n        wrapper.style.cssText = `\n            ${style.cssText};\n            white-space: pre-wrap;\n            word-break: break-word;\n            overflow: visible;\n          `;\n        wrapper.innerText = ta.value;\n        // preserve margins etc if needed:\n        wrapper.style.margin = style.margin;\n        (_ta$parentNode = ta.parentNode) === null || _ta$parentNode === void 0 ? void 0 : _ta$parentNode.replaceChild(wrapper, ta);\n      });\n    }\n  });\n\n  // build PDF\n  const imgData = canvas.toDataURL('image/png');\n  const pdf = new jsPDF('p', 'mm', 'a4');\n  const pdfWidth = pdf.internal.pageSize.getWidth();\n  const pdfHeight = canvas.height * pdfWidth / canvas.width;\n  pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n  pdf.save('form.pdf');\n}","map":{"version":3,"names":["html2canvas","jsPDF","generatePDF","formElement","document","getElementById","Error","canvas","scale","window","devicePixelRatio","useCORS","letterRendering","onclone","clonedDoc","clonedForm","classList","add","querySelectorAll","forEach","ta","_ta$parentNode","style","getComputedStyle","wrapper","createElement","cssText","innerText","value","margin","parentNode","replaceChild","imgData","toDataURL","pdf","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","width","addImage","save"],"sources":["C:/development/staff-update-form/client/src/pdfGenerator.js"],"sourcesContent":["// pdfUtils.js\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\n\r\nexport async function generatePDF() {\r\n  const formElement = document.getElementById('form-to-pdf');\r\n  if (!formElement) throw new Error('form-to-pdf element not found');\r\n\r\n  const canvas = await html2canvas(formElement, {\r\n    scale: window.devicePixelRatio || 2,\r\n    useCORS: true,\r\n    letterRendering: true,\r\n    onclone: (clonedDoc) => {\r\n      // add our print‐form class so any sizing CSS applies\r\n      const clonedForm = clonedDoc.getElementById('form-to-pdf');\r\n      clonedForm?.classList.add('print-form');\r\n\r\n      // replace <textarea> with wrapping <div>\r\n      clonedForm\r\n        .querySelectorAll('textarea')\r\n        .forEach((ta) => {\r\n          const style = window.getComputedStyle(ta);\r\n          const wrapper = clonedDoc.createElement('div');\r\n\r\n          // copy size & font styles\r\n          wrapper.style.cssText = `\r\n            ${style.cssText};\r\n            white-space: pre-wrap;\r\n            word-break: break-word;\r\n            overflow: visible;\r\n          `;\r\n\r\n          wrapper.innerText = ta.value;\r\n          // preserve margins etc if needed:\r\n          wrapper.style.margin = style.margin;\r\n          ta.parentNode?.replaceChild(wrapper, ta);\r\n        });\r\n    },\r\n  });\r\n\r\n  // build PDF\r\n  const imgData = canvas.toDataURL('image/png');\r\n  const pdf = new jsPDF('p', 'mm', 'a4');\r\n  const pdfWidth = pdf.internal.pageSize.getWidth();\r\n  const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\r\n  pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\r\n  pdf.save('form.pdf');\r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,WAAW,MAAM,aAAa;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;EAC1D,IAAI,CAACF,WAAW,EAAE,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;EAElE,MAAMC,MAAM,GAAG,MAAMP,WAAW,CAACG,WAAW,EAAE;IAC5CK,KAAK,EAAEC,MAAM,CAACC,gBAAgB,IAAI,CAAC;IACnCC,OAAO,EAAE,IAAI;IACbC,eAAe,EAAE,IAAI;IACrBC,OAAO,EAAGC,SAAS,IAAK;MACtB;MACA,MAAMC,UAAU,GAAGD,SAAS,CAACT,cAAc,CAAC,aAAa,CAAC;MAC1DU,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;;MAEvC;MACAF,UAAU,CACPG,gBAAgB,CAAC,UAAU,CAAC,CAC5BC,OAAO,CAAEC,EAAE,IAAK;QAAA,IAAAC,cAAA;QACf,MAAMC,KAAK,GAAGb,MAAM,CAACc,gBAAgB,CAACH,EAAE,CAAC;QACzC,MAAMI,OAAO,GAAGV,SAAS,CAACW,aAAa,CAAC,KAAK,CAAC;;QAE9C;QACAD,OAAO,CAACF,KAAK,CAACI,OAAO,GAAG;AAClC,cAAcJ,KAAK,CAACI,OAAO;AAC3B;AACA;AACA;AACA,WAAW;QAEDF,OAAO,CAACG,SAAS,GAAGP,EAAE,CAACQ,KAAK;QAC5B;QACAJ,OAAO,CAACF,KAAK,CAACO,MAAM,GAAGP,KAAK,CAACO,MAAM;QACnC,CAAAR,cAAA,GAAAD,EAAE,CAACU,UAAU,cAAAT,cAAA,uBAAbA,cAAA,CAAeU,YAAY,CAACP,OAAO,EAAEJ,EAAE,CAAC;MAC1C,CAAC,CAAC;IACN;EACF,CAAC,CAAC;;EAEF;EACA,MAAMY,OAAO,GAAGzB,MAAM,CAAC0B,SAAS,CAAC,WAAW,CAAC;EAC7C,MAAMC,GAAG,GAAG,IAAIjC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;EACtC,MAAMkC,QAAQ,GAAGD,GAAG,CAACE,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;EACjD,MAAMC,SAAS,GAAIhC,MAAM,CAACiC,MAAM,GAAGL,QAAQ,GAAI5B,MAAM,CAACkC,KAAK;EAC3DP,GAAG,CAACQ,QAAQ,CAACV,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEG,QAAQ,EAAEI,SAAS,CAAC;EACvDL,GAAG,CAACS,IAAI,CAAC,UAAU,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}