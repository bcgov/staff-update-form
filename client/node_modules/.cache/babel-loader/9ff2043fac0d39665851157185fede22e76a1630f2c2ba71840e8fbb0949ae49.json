{"ast":null,"code":"import html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\nexport async function generatePDF() {\n  const formElement = document.getElementById('form-to-pdf');\n  if (!formElement) {\n    console.error('generatePDF error: form element not found');\n    return;\n  }\n\n  // snapshot with your print‑form styles applied via onclone\n  const canvas = await html2canvas(formElement, {\n    scale: window.devicePixelRatio || 2,\n    useCORS: true,\n    letterRendering: true,\n    onclone: clonedDoc => {\n      const clonedForm = clonedDoc.getElementById('form-to-pdf');\n      if (clonedForm) clonedForm.classList.add('print-form');\n    }\n  });\n\n  // clean‑up the class on the real form\n  formElement.classList.remove('print-form');\n  const imgData = canvas.toDataURL('image/png');\n\n  // Create a PDF page exactly as wide/tall as the canvas, in px\n  const pdf = new jsPDF({\n    unit: 'px',\n    format: [canvas.width, canvas.height]\n  });\n\n  // Draw the full‑size image at 0,0\n  pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);\n  pdf.save('form.pdf');\n}","map":{"version":3,"names":["html2canvas","jsPDF","generatePDF","formElement","document","getElementById","console","error","canvas","scale","window","devicePixelRatio","useCORS","letterRendering","onclone","clonedDoc","clonedForm","classList","add","remove","imgData","toDataURL","pdf","unit","format","width","height","addImage","save"],"sources":["C:/development/staff-update-form/client/src/pdfGenerator.js"],"sourcesContent":["import html2canvas from 'html2canvas'\r\nimport { jsPDF } from 'jspdf'\r\n\r\nexport async function generatePDF() {\r\n  const formElement = document.getElementById('form-to-pdf')\r\n  if (!formElement) {\r\n    console.error('generatePDF error: form element not found')\r\n    return\r\n  }\r\n\r\n  // snapshot with your print‑form styles applied via onclone\r\n  const canvas = await html2canvas(formElement, {\r\n    scale: window.devicePixelRatio || 2,\r\n    useCORS: true,\r\n    letterRendering: true,\r\n    onclone: (clonedDoc) => {\r\n      const clonedForm = clonedDoc.getElementById('form-to-pdf')\r\n      if (clonedForm) clonedForm.classList.add('print-form')\r\n    }\r\n  })\r\n\r\n  // clean‑up the class on the real form\r\n  formElement.classList.remove('print-form')\r\n\r\n  const imgData = canvas.toDataURL('image/png')\r\n\r\n  // Create a PDF page exactly as wide/tall as the canvas, in px\r\n  const pdf = new jsPDF({\r\n    unit: 'px',\r\n    format: [ canvas.width, canvas.height ]\r\n  })\r\n\r\n  // Draw the full‑size image at 0,0\r\n  pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height)\r\n\r\n  pdf.save('form.pdf')\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AACrC,SAASC,KAAK,QAAQ,OAAO;AAE7B,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;EAC1D,IAAI,CAACF,WAAW,EAAE;IAChBG,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC1D;EACF;;EAEA;EACA,MAAMC,MAAM,GAAG,MAAMR,WAAW,CAACG,WAAW,EAAE;IAC5CM,KAAK,EAAEC,MAAM,CAACC,gBAAgB,IAAI,CAAC;IACnCC,OAAO,EAAE,IAAI;IACbC,eAAe,EAAE,IAAI;IACrBC,OAAO,EAAGC,SAAS,IAAK;MACtB,MAAMC,UAAU,GAAGD,SAAS,CAACV,cAAc,CAAC,aAAa,CAAC;MAC1D,IAAIW,UAAU,EAAEA,UAAU,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;IACxD;EACF,CAAC,CAAC;;EAEF;EACAf,WAAW,CAACc,SAAS,CAACE,MAAM,CAAC,YAAY,CAAC;EAE1C,MAAMC,OAAO,GAAGZ,MAAM,CAACa,SAAS,CAAC,WAAW,CAAC;;EAE7C;EACA,MAAMC,GAAG,GAAG,IAAIrB,KAAK,CAAC;IACpBsB,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE,CAAEhB,MAAM,CAACiB,KAAK,EAAEjB,MAAM,CAACkB,MAAM;EACvC,CAAC,CAAC;;EAEF;EACAJ,GAAG,CAACK,QAAQ,CAACP,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEZ,MAAM,CAACiB,KAAK,EAAEjB,MAAM,CAACkB,MAAM,CAAC;EAE/DJ,GAAG,CAACM,IAAI,CAAC,UAAU,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}